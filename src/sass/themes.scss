@use '../../node_modules/@angular/material/index' as mat;
@use 'sass:map';

$light-theme: mat.define-light-theme(
  (
    color: (
      primary: mat.define-palette(mat.$indigo-palette),
      accent: mat.define-palette(mat.$pink-palette),
    ),
    typography: mat.define-typography-config(),
    density: 0,
  )
);
$dark-theme: mat.define-dark-theme(
  (
    color: (
      primary: mat.define-palette(mat.$red-palette),
      accent: mat.define-palette(mat.$blue-gray-palette),
    ),
    typography: mat.define-typography-config(),
    density: 0,
  )
);

/// Gets the CSS property and it's computed value for both light and dark themes.
/// @param {String} $property The css property to set. ex: background, color, background-color, border-color etc.
/// @param {String} $color Theme color. Accepted values are: primary, accent, or warn.
/// @param {String | Number} $hue The hue from the palette to use. If this is a value between 0 and 1, it will be treated as opacity.
/// @returns {CssProperty} CSS property with it's computed value for the both light and dark themes.
@mixin get-theme-color-property($property, $color, $hue: null) {
  $light-color-config: mat.get-color-config($light-theme);
  $light-color-palette: map.get($light-color-config, $color);
  $dark-color-config: mat.get-color-config($dark-theme);
  $dark-color-palette: map.get($dark-color-config, $color);

  @if $hue {
    $light-color: mat.get-color-from-palette($light-color-palette, $hue);
    $dark-color: mat.get-color-from-palette($dark-color-palette, $hue);

    & {
      #{$property}: $light-color;
    }

    @media (prefers-color-scheme: dark) {
      #{$property}: $dark-color;
    }
  } @else {
    $light-color: mat.get-color-from-palette($light-color-palette);
    $dark-color: mat.get-color-from-palette($dark-color-palette);

    & {
      #{$property}: $light-color;
    }

    @media (prefers-color-scheme: dark) {
      #{$property}: $dark-color;
    }
  }
}

@mixin get-background-color-property($property, $color) {
  & {
    #{$property}: map.get(mat.$light-theme-background-palette, $color);
  }

  @media (prefers-color-scheme: dark) {
    #{$property}: map.get(mat.$dark-theme-background-palette, $color);
  }
}

@mixin get-foreground-color-property($property, $color) {
  & {
    #{$property}: map.get(mat.$light-theme-foreground-palette, $color);
  }

  @media (prefers-color-scheme: dark) {
    #{$property}: map.get(mat.$dark-theme-foreground-palette, $color);
  }
}
